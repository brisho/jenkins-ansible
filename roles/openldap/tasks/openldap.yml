---

- name: Install OpenLDAP packages
  yum: pkg={{ item }} state=latest
  with_items:
      - openldap-clients
      - openldap-servers

- name: Check if LDAPS is enabled
  command: '/usr/bin/grep SLAPD_URLS /etc/sysconfig/slapd'
  register: ldaps_enabled
  failed_when: 1 == 0
  changed_when: 1 == 0

- name: Enable LDAPS
  lineinfile: dest=/etc/sysconfig/slapd
      regexp='^SLAPD_URLS=.*'
      line='SLAPD_URLS="ldapi:/// ldaps:/// ldap:///"'
  notify: Restart slapd
  when: '"ldaps:///" not in ldaps_enabled.stdout'

- name: Generate admin password hash
  shell: 'echo -n "{{ slapd_admin_password }}" | /usr/sbin/slappasswd -h "{SSHA}" -T /dev/fd/0'
  register: ldap_passwd
  failed_when: 1 == 0
  changed_when: 1 == 0

- name: Ensure OpenLDAP server is running
  service: name=slapd
      enabled=yes
      state=started

- name: Install core schema
  command: /usr/bin/ldapadd -Y EXTERNAL -H ldapi:/// -f {{ slapd_dir }}/schema/core.ldif
      creates='{{ slapd_dir }}/slapd.d/cn=config/cn=schema/cn={0}core.ldif'

- name: Install cosine schema
  command: /usr/bin/ldapadd -Y EXTERNAL -H ldapi:/// -f {{ slapd_dir }}/schema/cosine.ldif
      creates='{{ slapd_dir }}/slapd.d/cn=config/cn=schema/cn={1}cosine.ldif'

- name: Install inetorgperson schema
  command: /usr/bin/ldapadd -Y EXTERNAL -H ldapi:/// -f {{ slapd_dir }}/schema/inetorgperson.ldif
      creates='{{ slapd_dir }}/slapd.d/cn=config/cn=schema/cn={2}inetorgperson.ldif'

- name: Copy LDIF for memberOf overlay
  copy: src=backend.memberof.ldif
      dest='{{ slapd_dir }}/backend.memberof.ldif'

- name: Copy LDIF for referential integrity overlay
  copy: src=backend.refint.ldif
      dest='{{ slapd_dir }}/backend.refint.ldif'

- name: Enable memberOf overlay
  command: /usr/bin/ldapadd -Y EXTERNAL -H ldapi:/// -f {{ slapd_dir }}/backend.memberof.ldif
      creates='{{ slapd_dir }}/slapd.d/cn=config/olcDatabase={2}{{ slapd_backend }}/olcOverlay={0}memberof.ldif'

- name: Enable referential integrity overlay
  command: /usr/bin/ldapadd -Y EXTERNAL -H ldapi:/// -f {{ slapd_dir }}/backend.refint.ldif
      creates='{{ slapd_dir }}/slapd.d/cn=config/olcDatabase={2}{{ slapd_backend }}/olcOverlay={1}refint.ldif'

- name: Test if remote access is already configured
  shell: '/usr/bin/grep "olcRootDN: cn=admin,cn=config" {{ slapd_dir }}/slapd.d/cn=config/olcDatabase={*}config.ldif'
  register: remote_access_enabled
  failed_when: 1 == 0
  changed_when: 1 == 0

- name: Copy LDIF for remote access
  template: src=backend.remote_access.ldif
      dest='{{ slapd_dir }}/backend.remote_access.ldif'
  when: '"olcRootDN:" not in remote_access_enabled.stdout'

- name: Enable remote access
  command: /usr/bin/ldapadd -Y EXTERNAL -H ldapi:/// -f {{ slapd_dir }}/backend.remote_access.ldif
  when: '"olcRootDN:" not in remote_access_enabled.stdout'

- name: Check if LDAP database is initialized
  shell: '/usr/bin/grep {{ slapd_basedn }} {{ slapd_dir }}/slapd.d/cn=config/olcDatabase={*}{{ slapd_backend }}.ldif'
  register: ldap_db_initialized
  failed_when: 1 == 0
  changed_when: 1 == 0

- name: Copy LDIF for LDAP database initialization
  template: src=db.init.ldif
      dest='{{ slapd_dir }}/db.init.ldif'
  when: '"{{ slapd_basedn }}" not in ldap_db_initialized.stdout'

- name: Initialize the LDAP database
  shell: /usr/bin/ldapadd -x -H ldapi:/// -D cn=admin,cn=config -w {{ slapd_admin_password }} -f {{ slapd_dir }}/db.init.ldif
  when: '"{{ slapd_basedn }}" not in ldap_db_initialized.stdout'

- name: Copy LDIF for DIT initialization
  template: src=dit.init.ldif
      dest='{{ slapd_dir }}/dit.init.ldif'
  when: '"{{ slapd_basedn }}" not in ldap_db_initialized.stdout'

- name: Initialize the DIT
  shell: /usr/bin/ldapadd -x -H ldapi:/// -D cn=admin,{{ slapd_basedn }} -w {{ slapd_admin_password }} -f {{ slapd_dir }}/dit.init.ldif
  when: '"{{ slapd_basedn }}" not in ldap_db_initialized.stdout'
